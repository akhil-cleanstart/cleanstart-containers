version: '3.8'

services:
  # MinIO Operator
  minio-operator:
    image: minio/operator:v5.0.6
    container_name: minio-operator
    environment:
      WATCHED_NAMESPACE: ""
      MINIO_OPERATOR_LOG_LEVEL: info
      MINIO_OPERATOR_WATCH_NAMESPACE: ""
    ports:
      - "4222:4222"
      - "4223:4223"
    volumes:
      - minio_operator_data:/app/data
      - ./config:/app/config
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4222/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    networks:
      - minio-network

  # MinIO Tenant
  minio-tenant:
    image: minio/minio:RELEASE.2024-01-16T16-07-38Z
    container_name: minio-tenant
    command: minio server --console-address ":9001" /data
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
      MINIO_PROMETHEUS_AUTH_TYPE: public
      MINIO_PROMETHEUS_URL: http://prometheus:9090
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_tenant_data:/data
    depends_on:
      - minio-operator
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    networks:
      - minio-network

  # MinIO Console
  minio-console:
    image: minio/console:v0.22.0
    container_name: minio-console
    environment:
      MINIO_SERVER_URL: http://minio-tenant:9000
      MINIO_BROWSER_REDIRECT_URL: http://localhost:9001
    ports:
      - "9002:9001"
    depends_on:
      - minio-tenant
    restart: unless-stopped
    networks:
      - minio-network

  # MinIO Sidecar Example
  app-with-minio-sidecar:
    image: nginx:alpine
    container_name: app-with-minio-sidecar
    environment:
      MINIO_ENDPOINT: http://minio-tenant:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin123
    ports:
      - "8080:80"
    volumes:
      - ./app-data:/app/data
      - ./minio-config:/app/minio-config
    depends_on:
      - minio-tenant
    restart: unless-stopped
    networks:
      - minio-network

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: minio-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    depends_on:
      - minio-tenant
    restart: unless-stopped
    networks:
      - minio-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: minio-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - minio-network

volumes:
  minio_operator_data:
    driver: local
  minio_tenant_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  minio-network:
    driver: bridge
