version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: postgres-k8s-demo
    environment:
      POSTGRES_DB: helloworld
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d helloworld"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    networks:
      - postgres-network

  # Optional: pgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin-k8s-demo
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "8080:80"
    depends_on:
      - postgres
    networks:
      - postgres-network
    restart: unless-stopped

  # Optional: Database initialization script runner
  db-init:
    image: postgres:15-alpine
    container_name: postgres-init
    environment:
      PGHOST: postgres
      PGPORT: 5432
      POSTGRES_DB: helloworld
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./init-scripts:/docker-entrypoint-initdb.d
    command: >
      sh -c "
        echo 'Waiting for PostgreSQL to be ready...' &&
        until pg_isready -h postgres -p 5432 -U postgres; do
          echo 'PostgreSQL is unavailable - sleeping'
          sleep 2
        done
        echo 'PostgreSQL is up - executing init scripts'
        psql -h postgres -U postgres -d helloworld -f /docker-entrypoint-initdb.d/init.sql
      "
    networks:
      - postgres-network

volumes:
  postgres_data:
    driver: local

networks:
  postgres-network:
    driver: bridge
