user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log notice;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    
    access_log /var/log/nginx/access.log main;
    
    # Performance
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    
    # Upstream backend
    upstream python_backend {
        server python-app:5000;
    }
    
    # Main server block
    server {
        listen 80;
        server_name _;
        
        # Health check endpoint
        location /health {
            access_log off;
            return 200 "nginx-proxy healthy\n";
            add_header Content-Type text/plain;
        }
        
        # API routes
        location /api/ {
            proxy_pass http://python_backend/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # Direct backend access
        location /backend/ {
            proxy_pass http://python_backend/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # Default route - serve a simple dashboard
        location / {
            return 200 '<!DOCTYPE html>
<html>
<head>
    <title>K8s Sample Test Dashboard</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; }
        .container { background: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
        .service { margin: 20px 0; padding: 15px; border-left: 4px solid #007cba; background: #f8f9fa; }
        .endpoint { background: #e3f2fd; padding: 10px; margin: 5px 0; border-radius: 5px; font-family: monospace; }
        .status { color: #4caf50; font-weight: bold; }
        .test-btn { background: #007cba; color: white; padding: 10px 20px; border: none; border-radius: 5px; cursor: pointer; margin: 5px; }
        .test-btn:hover { background: #005a8b; }
    </style>
</head>
<body>
    <div class="container">
        <h1>üöÄ Kubernetes Sample Test Dashboard</h1>
        <p class="status">‚úÖ Python + Nginx services running via Docker Compose</p>
        
        <div class="service">
            <h3>üêç Python Application</h3>
            <div class="endpoint">GET /backend/ - Direct Python app access</div>
            <div class="endpoint">GET /backend/health - Health check</div>
            <div class="endpoint">GET /api/* - Proxied to Python app</div>
            <button class="test-btn" onclick="testEndpoint('/backend/health')">Test Python Health</button>
            <button class="test-btn" onclick="testEndpoint('/backend/')">Test Python App</button>
        </div>
        
        <div class="service">
            <h3>üåê Nginx Proxy</h3>
            <div class="endpoint">GET /health - Nginx health check</div>
            <div class="endpoint">GET / - This dashboard</div>
            <button class="test-btn" onclick="testEndpoint('/health')">Test Nginx Health</button>
        </div>
        
        <div class="service">
            <h3>üß™ Test Results</h3>
            <div id="test-results"></div>
        </div>
    </div>
    
    <script>
        function testEndpoint(endpoint) {
            const results = document.getElementById("test-results");
            results.innerHTML = "<p>Testing " + endpoint + "...</p>";
            
            fetch(endpoint)
                .then(response => {
                    if (response.ok) {
                        results.innerHTML = "<p style=\"color: green;\">‚úÖ " + endpoint + " - OK</p>";
                    } else {
                        results.innerHTML = "<p style=\"color: red;\">‚ùå " + endpoint + " - Error: " + response.status + "</p>";
                    }
                })
                .catch(error => {
                    results.innerHTML = "<p style=\"color: red;\">‚ùå " + endpoint + " - Error: " + error.message + "</p>";
                });
        }
    </script>
</body>
</html>';
            add_header Content-Type text/html;
        }
    }
}
