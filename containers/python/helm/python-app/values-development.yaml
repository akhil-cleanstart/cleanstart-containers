# Development values for python-app
# This file contains development-specific configurations

# Global settings
global:
  imageRegistry: ""
  imagePullSecrets: []

# Image configuration
image:
  repository: cleanstart/python
  tag: "latest"
  pullPolicy: Always

# Service account
serviceAccount:
  create: true
  annotations: {}

# Pod security context
podSecurityContext:
  runAsNonRoot: true
  runAsUser: 1001
  runAsGroup: 1001
  fsGroup: 1001

# Container security context
securityContext:
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: false
  runAsNonRoot: true
  runAsUser: 1001
  runAsGroup: 1001
  capabilities:
    drop:
      - ALL

# Deployment configuration
replicaCount: 1

# Pod annotations
podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/port: "5000"
  prometheus.io/path: "/metrics"

# Service configuration
service:
  type: ClusterIP
  port: 5000
  targetPort: 5000
  protocol: TCP
  name: http
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "5000"
    prometheus.io/path: "/metrics"

# Ingress configuration
ingress:
  enabled: true
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "false"
    nginx.ingress.kubernetes.io/proxy-body-size: "16m"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "30"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "30"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "30"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
  hosts:
    - host: python-app.dev.example.com
      paths:
        - path: /
          pathType: Prefix
    - host: api.dev.example.com
      paths:
        - path: /api
          pathType: Prefix
        - path: /health
          pathType: Prefix
        - path: /metrics
          pathType: Prefix
  tls: []

# Resource configuration
resources:
  limits:
    cpu: 500m
    memory: 512Mi
  requests:
    cpu: 250m
    memory: 256Mi

# Autoscaling configuration
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 3
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

# Node selector
nodeSelector: {}

# Tolerations
tolerations: []

# Affinity
affinity: {}

# Environment variables
env:
  # Application Configuration
  FLASK_ENV: "development"
  FLASK_DEBUG: "true"
  FLASK_APP: "app.py"
  LOG_LEVEL: "DEBUG"
  
  # Database Configuration
  DB_POOL_SIZE: "5"
  DB_POOL_TIMEOUT: "30"
  DB_POOL_RECYCLE: "3600"
  
  # Redis Configuration
  REDIS_POOL_SIZE: "5"
  REDIS_TIMEOUT: "5"
  
  # Application Settings
  MAX_CONTENT_LENGTH: "16777216"  # 16MB
  PERMANENT_SESSION_LIFETIME: "3600"  # 1 hour
  
  # Security Settings
  SECRET_KEY: "dev-secret-key-change-me"
  WTF_CSRF_ENABLED: "false"
  WTF_CSRF_TIME_LIMIT: "3600"
  
  # Monitoring Configuration
  ENABLE_METRICS: "true"
  METRICS_PORT: "5000"
  HEALTH_CHECK_INTERVAL: "30"
  
  # Caching Configuration
  CACHE_TYPE: "simple"
  CACHE_DEFAULT_TIMEOUT: "300"
  
  # API Configuration
  API_RATE_LIMIT: "100"
  API_RATE_LIMIT_WINDOW: "60"
  
  # Logging Configuration
  LOG_FORMAT: "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
  LOG_FILE: "/app/logs/app.log"
  LOG_MAX_SIZE: "10485760"  # 10MB
  LOG_BACKUP_COUNT: "5"
  
  # Performance Configuration
  WORKER_THREADS: "2"
  WORKER_CONNECTIONS: "100"
  KEEPALIVE_TIMEOUT: "65"
  
  # Feature Flags
  ENABLE_DEBUG_ENDPOINTS: "true"
  ENABLE_PROFILING: "true"
  ENABLE_CORS: "true"
  
  # External Services
  EXTERNAL_API_URL: "https://api.dev.example.com"
  EXTERNAL_API_TIMEOUT: "30"
  
  # Application-specific settings
  APP_NAME: "Python Development App"
  APP_VERSION: "1.0.0-dev"
  APP_DESCRIPTION: "Python application running on Kubernetes in development"
  
  # Timezone Configuration
  TZ: "UTC"
  
  # Python-specific settings
  PYTHONPATH: "/app"
  PYTHONUNBUFFERED: "1"
  PYTHONDONTWRITEBYTECODE: "1"
  
  # Gunicorn Configuration
  GUNICORN_WORKERS: "2"
  GUNICORN_WORKER_CLASS: "sync"
  GUNICORN_WORKER_CONNECTIONS: "100"
  GUNICORN_MAX_REQUESTS: "1000"
  GUNICORN_MAX_REQUESTS_JITTER: "100"
  GUNICORN_TIMEOUT: "30"
  GUNICORN_KEEPALIVE: "2"
  GUNICORN_PRELOAD_APP: "true"
  
  # Health Check Configuration
  HEALTH_CHECK_PATH: "/health"
  READINESS_CHECK_PATH: "/ready"
  LIVENESS_CHECK_PATH: "/health"
  
  # Graceful Shutdown Configuration
  GRACEFUL_SHUTDOWN_TIMEOUT: "30"
  SHUTDOWN_HANDLERS_ENABLED: "true"

# Secrets configuration
secrets:
  # Database Configuration
  database:
    url: "sqlite:///app/data/users.db"
    password: "dev-password"
  
  # Redis Configuration
  redis:
    url: "redis://redis-service:6379"
    password: "dev-redis-password"
  
  # API Keys
  api:
    key: "dev-api-key"
    jwtSecret: "dev-jwt-secret-key"
  
  # External Service Credentials
  external:
    apiKey: "dev-external-api-key"
    apiSecret: "dev-external-api-secret"
  
  # Email Configuration
  email:
    password: "dev-email-password"
    username: "dev@example.com"
  
  # OAuth Credentials
  oauth:
    clientId: "dev-oauth-client-id"
    clientSecret: "dev-oauth-client-secret"
  
  # Encryption Keys
  encryption:
    key: "dev-encryption-key"
    signingKey: "dev-signing-key"
  
  # Third-party Service Keys
  aws:
    accessKey: "dev-aws-access-key"
    secretKey: "dev-aws-secret-key"
  
  # Monitoring and Logging
  monitoring:
    prometheusToken: "dev-prometheus-token"
    grafanaApiKey: "dev-grafana-api-key"
  
  # Backup and Storage
  storage:
    backupEncryptionKey: "dev-backup-encryption-key"
    accessKey: "dev-storage-access-key"
    secretKey: "dev-storage-secret-key"
  
  # SSL/TLS Certificates
  ssl:
    cert: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0t"  # Base64 encoded SSL certificate
    key: "LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0t"  # Base64 encoded SSL private key
  
  # Application-specific secrets
  app:
    adminPassword: "dev-admin-password"
    userDefaultPassword: "dev-user-default-password"
  
  # Feature Flags (sensitive)
  features:
    betaFeaturesEnabled: "true"
    debugMode: "true"
  
  # Rate Limiting
  rateLimit:
    key: "dev-rate-limit-key"
  
  # Session Configuration
  session:
    secret: "dev-session-secret-key"
  
  # Cache Configuration
  cache:
    password: "dev-cache-password"
  
  # Message Queue
  messageQueue:
    rabbitmqPassword: "dev-rabbitmq-password"
    kafkaPassword: "dev-kafka-password"
  
  # Webhook Secrets
  webhooks:
    secret: "dev-webhook-secret"
    githubSecret: "dev-github-webhook-secret"
  
  # Analytics and Tracking
  analytics:
    key: "dev-analytics-key"
    trackingId: "dev-tracking-id"
  
  # Payment Processing
  payment:
    stripeSecretKey: "dev-stripe-secret-key"
    paypalClientSecret: "dev-paypal-client-secret"
  
  # CDN and Media
  media:
    cdnAccessKey: "dev-cdn-access-key"
    storageKey: "dev-media-storage-key"
  
  # Notification Services
  notifications:
    pushNotificationKey: "dev-push-notification-key"
    smsApiKey: "dev-sms-api-key"
  
  # Search and Indexing
  search:
    elasticsearchPassword: "dev-elasticsearch-password"
    solrPassword: "dev-solr-password"
  
  # Machine Learning Services
  ml:
    apiKey: "dev-ml-api-key"
    aiServiceToken: "dev-ai-service-token"
  
  # Compliance and Audit
  compliance:
    auditEncryptionKey: "dev-audit-encryption-key"
    complianceToken: "dev-compliance-token"

# Health checks configuration
healthCheck:
  livenessProbe:
    httpGet:
      path: /health
      port: 5000
      scheme: HTTP
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1
  
  readinessProbe:
    httpGet:
      path: /ready
      port: 5000
      scheme: HTTP
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3
    successThreshold: 1
  
  startupProbe:
    httpGet:
      path: /health
      port: 5000
      scheme: HTTP
    initialDelaySeconds: 10
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 30
    successThreshold: 1

# Volume configuration
volumes:
  config:
    mountPath: /app/config
    readOnly: true
  
  logs:
    mountPath: /app/logs
  
  tmp:
    mountPath: /tmp
  
  uploads:
    mountPath: /app/uploads

# Persistent volume configuration
persistence:
  enabled: false
  storageClass: ""
  accessMode: ReadWriteOnce
  size: 10Gi
  annotations: {}

# Network policy configuration
networkPolicy:
  enabled: false
  ingress: []
  egress: []

# Pod disruption budget
podDisruptionBudget:
  enabled: false
  minAvailable: 1
  maxUnavailable: 1

# Termination grace period
terminationGracePeriodSeconds: 30

# DNS policy
dnsPolicy: ClusterFirst
