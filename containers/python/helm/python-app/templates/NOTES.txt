1. Get the application URL by running these commands:
{{- if .Values.ingress.enabled }}
{{- range $host := .Values.ingress.hosts }}
  {{- range .paths }}
  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host.host }}{{ .path }}
  {{- end }}
{{- end }}
{{- else if contains "NodePort" .Values.service.type }}
  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "python-app.fullname" . }})
  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo http://$NODE_IP:$NODE_PORT
{{- else if contains "LoadBalancer" .Values.service.type }}
     NOTE: It may take a few minutes for the LoadBalancer IP to be available.
           You can watch the status of by running 'kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include "python-app.fullname" . }}'
  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include "python-app.fullname" . }} --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")
  echo http://$SERVICE_IP:{{ .Values.service.port }}
{{- else if contains "ClusterIP" .Values.service.type }}
  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ include "python-app.name" . }},app.kubernetes.io/instance={{ .Release.Name }}" -o jsonpath="{.items[0].metadata.name}")
  export CONTAINER_PORT=$(kubectl get pod --namespace {{ .Release.Namespace }} $POD_NAME -o jsonpath="{.spec.containers[0].ports[0].containerPort}")
  echo "Visit http://127.0.0.1:8080 to use your application"
  kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME 8080:$CONTAINER_PORT
{{- end }}

2. Check the application status:
  kubectl get pods --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ include "python-app.name" . }},app.kubernetes.io/instance={{ .Release.Name }}"

3. View the application logs:
  kubectl logs --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ include "python-app.name" . }},app.kubernetes.io/instance={{ .Release.Name }}" -f

4. Check the service:
  kubectl get svc --namespace {{ .Release.Namespace }} {{ include "python-app.fullname" . }}

{{- if .Values.autoscaling.enabled }}

5. Check the Horizontal Pod Autoscaler:
  kubectl get hpa --namespace {{ .Release.Namespace }} {{ include "python-app.fullname" . }}

{{- end }}

{{- if .Values.ingress.enabled }}

6. Check the ingress:
  kubectl get ingress --namespace {{ .Release.Namespace }} {{ include "python-app.fullname" . }}

{{- end }}

{{- if .Values.persistence.enabled }}

7. Check the persistent volume claim:
  kubectl get pvc --namespace {{ .Release.Namespace }} {{ include "python-app.fullname" . }}-pvc

{{- end }}

{{- if .Values.networkPolicy.enabled }}

8. Check the network policy:
  kubectl get networkpolicy --namespace {{ .Release.Namespace }} {{ include "python-app.fullname" . }}

{{- end }}

9. Access the application health endpoint:
  kubectl exec --namespace {{ .Release.Namespace }} -it deployment/{{ include "python-app.fullname" . }} -- curl http://localhost:{{ .Values.service.targetPort }}/health

10. Access the application metrics endpoint:
  kubectl exec --namespace {{ .Release.Namespace }} -it deployment/{{ include "python-app.fullname" . }} -- curl http://localhost:{{ .Values.service.targetPort }}/metrics

For more information about this application, visit:
- CleanStart Website: https://www.cleanstart.com
- Python Official Documentation: https://docs.python.org/
- Flask Documentation: https://flask.palletsprojects.com/

To uninstall this chart:
  helm uninstall {{ .Release.Name }} --namespace {{ .Release.Namespace }}
