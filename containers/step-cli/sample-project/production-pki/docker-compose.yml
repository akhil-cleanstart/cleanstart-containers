version: '3.8'

networks:
  pki:
    driver: bridge
  monitoring:
    driver: bridge
  security:
    driver: bridge

volumes:
  step_secrets:
    driver: local
  step_certs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  alertmanager_data:
    driver: local
  backup_data:
    driver: local

services:
  # Production CA server with high availability
  step-ca:
    image: cleanstart/step-cli:latest
    container_name: step-ca-production
    restart: unless-stopped
    ports:
      - "443:443"
    volumes:
      - step_secrets:/app/secrets
      - ./ca-config:/app/ca-config
      - ./backup:/app/backup
    environment:
      - STEPPATH=/app/secrets
      - STEP_CA_LOG_LEVEL=info
      - STEP_CA_DB_TYPE=badger
      - STEP_CA_DB_DATA_SOURCE=/app/secrets/db
    networks:
      - pki
      - monitoring
      - security
    command: ["step-ca", "/app/secrets/config/ca.json"]
    healthcheck:
      test: ["CMD", "step", "ca", "health", "--ca-url", "https://localhost:443"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Step CLI for production operations
  step-cli:
    image: cleanstart/step-cli:latest
    container_name: step-cli-production
    restart: unless-stopped
    volumes:
      - step_secrets:/app/secrets
      - step_certs:/app/certs
      - ./scripts:/app/scripts
      - ./policies:/app/policies
    environment:
      - STEPPATH=/app/secrets
      - STEP_CA_URL=https://step-ca:443
    networks:
      - pki
      - monitoring
      - security
    depends_on:
      - step-ca
    command: ["tail", "-f", "/dev/null"]
    healthcheck:
      test: ["CMD", "step", "version"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Production certificate management service
  cert-manager:
    image: cleanstart/python:latest
    container_name: cert-manager-production
    restart: unless-stopped
    ports:
      - "8080:8080"
    volumes:
      - step_certs:/app/certs
      - ./cert-manager:/app
      - ./policies:/app/policies
    networks:
      - pki
      - monitoring
      - security
    depends_on:
      - step-ca
    command: >
      sh -c "pip install flask requests schedule cryptography &&
             python3 /app/cert_manager.py"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'

  # Certificate monitoring and alerting
  cert-monitor:
    image: cleanstart/python:latest
    container_name: cert-monitor-production
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - step_certs:/app/certs
      - ./monitoring:/app
    networks:
      - pki
      - monitoring
    depends_on:
      - step-ca
    command: >
      sh -c "pip install flask prometheus-client requests schedule &&
             python3 /app/monitoring_service.py"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for metrics collection
  prometheus:
    image: cleanstart/prometheus:latest
    container_name: prometheus-production
    restart: unless-stopped
    ports:
      - "9091:9090"
    volumes:
      - prometheus_data:/prometheus
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./prometheus/rules:/etc/prometheus/rules:ro
    networks:
      - monitoring
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana for visualization
  grafana:
    image: cleanstart/grafana:latest
    container_name: grafana-production
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    networks:
      - monitoring
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # AlertManager for alerting
  alertmanager:
    image: cleanstart/alertmanager:latest
    container_name: alertmanager-production
    restart: unless-stopped
    ports:
      - "9093:9093"
    volumes:
      - alertmanager_data:/alertmanager
      - ./alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
    networks:
      - monitoring
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9093/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy for security
  nginx:
    image: cleanstart/nginx:latest
    container_name: nginx-production
    restart: unless-stopped
    ports:
      - "80:80"
      - "8443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/html:/usr/share/nginx/html:ro
    networks:
      - pki
      - monitoring
      - security
    depends_on:
      - step-ca
      - cert-manager
      - cert-monitor
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backup service
  backup:
    image: cleanstart/nginx:latest
    container_name: backup-production
    restart: unless-stopped
    volumes:
      - step_secrets:/app/secrets:ro
      - step_certs:/app/certs:ro
      - backup_data:/app/backup
      - ./backup:/app/scripts
    networks:
      - pki
    depends_on:
      - step-ca
    command: >
      sh -c "apk add --no-cache rsync &&
             while true; do
               /app/scripts/backup.sh
               sleep 86400
             done"
    healthcheck:
      test: ["CMD", "ls", "/app/backup/latest"]
      interval: 3600s
      timeout: 30s
      retries: 3

  # Audit logging service
  audit-logger:
    image: cleanstart/python:latest
    container_name: audit-logger-production
    restart: unless-stopped
    volumes:
      - step_secrets:/app/secrets:ro
      - ./audit:/app
      - ./logs:/app/logs
    networks:
      - pki
      - monitoring
    depends_on:
      - step-ca
    command: >
      sh -c "pip install requests schedule &&
             python3 /app/audit_logger.py"
    healthcheck:
      test: ["CMD", "ls", "/app/logs/audit.log"]
      interval: 60s
      timeout: 10s
      retries: 3
