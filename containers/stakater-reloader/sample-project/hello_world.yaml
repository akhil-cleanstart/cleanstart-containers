# Stakater Reloader Hello World Example
# This demonstrates basic Stakater Reloader functionality for automatic pod restarts

apiVersion: v1
kind: ConfigMap
metadata:
  name: hello-world-config
  annotations:
    # This annotation tells Reloader to restart pods when this ConfigMap changes
    reloader.stakater.com/auto: "true"
data:
  app.properties: |
    # Hello World Application Configuration
    app.name=Hello World App
    app.version=1.0.0
    app.message=Hello from Stakater Reloader!
    
    # Server configuration
    server.port=8080
    server.host=0.0.0.0
    
    # Logging configuration
    logging.level=INFO
    logging.pattern=%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hello-world-app
spec:
  replicas: 2
  selector:
    matchLabels:
      app: hello-world-app
  template:
    metadata:
      labels:
        app: hello-world-app
      annotations:
        # This annotation tells Reloader to restart pods when ConfigMap changes
        configmap.reloader.stakater.com/reload: "hello-world-config"
    spec:
      containers:
      - name: hello-world
        image: nginx:latest
        ports:
        - containerPort: 80
        env:
        - name: APP_MESSAGE
          valueFrom:
            configMapKeyRef:
              name: hello-world-config
              key: app.properties
        volumeMounts:
        - name: config-volume
          mountPath: /etc/config
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 200m
            memory: 256Mi
      volumes:
      - name: config-volume
        configMap:
          name: hello-world-config
---
apiVersion: v1
kind: Service
metadata:
  name: hello-world-service
spec:
  selector:
    app: hello-world-app
  ports:
  - port: 80
    targetPort: 80
    protocol: TCP
  type: ClusterIP
---
# Test script to demonstrate config changes
apiVersion: v1
kind: ConfigMap
metadata:
  name: hello-world-test-script
data:
  test-reload.sh: |
    #!/bin/bash
    echo "üöÄ Testing Stakater Reloader Hello World"
    echo "========================================"
    
    # Wait for deployment to be ready
    echo "‚è≥ Waiting for deployment to be ready..."
    kubectl wait --for=condition=available deployment/hello-world-app --timeout=60s
    
    # Get initial pod names
    echo "üìã Initial pods:"
    kubectl get pods -l app=hello-world-app -o name
    
    # Update the ConfigMap
    echo "üîÑ Updating ConfigMap..."
    kubectl patch configmap hello-world-config --patch '{
      "data": {
        "app.properties": "app.name=Hello World App\napp.version=2.0.0\napp.message=Hello from Updated Stakater Reloader!\nserver.port=8080\nserver.host=0.0.0.0\nlogging.level=DEBUG\nlogging.pattern=%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
      }
    }'
    
    # Wait a moment for reloader to detect changes
    echo "‚è≥ Waiting for Reloader to detect changes..."
    sleep 10
    
    # Check if pods are restarting
    echo "üîÑ Checking pod restarts..."
    kubectl get pods -l app=hello-world-app -o wide
    
    # Wait for new pods to be ready
    echo "‚è≥ Waiting for new pods to be ready..."
    kubectl wait --for=condition=ready pod -l app=hello-world-app --timeout=60s
    
    # Show final pod names
    echo "üìã Final pods:"
    kubectl get pods -l app=hello-world-app -o name
    
    echo "‚úÖ Stakater Reloader Hello World test completed!"
    echo "   Pods should have been restarted due to ConfigMap changes."
