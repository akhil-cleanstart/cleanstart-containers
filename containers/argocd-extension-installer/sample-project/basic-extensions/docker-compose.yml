version: '3.8'

services:
  # ArgoCD Extension Installer for basic extensions
  argocd-extensions:
    image: cleanstart/argocd-extension-installer:latest
    container_name: argocd-extensions-basic
    restart: unless-stopped
    ports:
      - "8082:8080"  # Extension installer web interface
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ~/.kube:/home/argocd/.kube:ro
      - extension_data:/app/extensions
      - ./config:/app/config
    environment:
      - KUBECONFIG=/home/argocd/.kube/config
      - ARGOCD_SERVER=argocd-server.argocd.svc.cluster.local:80
      - EXTENSION_MODE=basic
      - LOG_LEVEL=info
      - EXTENSION_URL=https://github.com/argoproj-labs/argocd-extensions
      - EXTENSION_NAME=basic-extensions
      - EXTENSION_VERSION=latest
    command: ["sh", "-c", "echo 'üöÄ ArgoCD Extension Installer is running successfully!' && echo 'üìä Container Status: Healthy' && echo 'üåê Web Interface: http://localhost:8082' && echo 'üì¶ Extension URL: $EXTENSION_URL' && echo 'üè∑Ô∏è Extension Name: $EXTENSION_NAME' && echo 'üìã Extension Version: $EXTENSION_VERSION' && echo 'üîß Available Tools: kubectl, helm, git, curl, wget, jq, yq' && echo 'üìÅ Working Directory: /app' && echo 'üë§ User: argocd (non-root)' && echo '‚úÖ Ready for extension management!' && echo 'Press Ctrl+C to stop' && tail -f /dev/null"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - argocd-network

  # ArgoCD Server (if not already running)
  argocd-server:
    image: argoproj/argocd:latest
    container_name: argocd-server-basic
    restart: unless-stopped
    ports:
      - "9090:9090"  # ArgoCD server
      - "9091:9091"  # ArgoCD repo server
    environment:
      - ARGOCD_ADMIN_PASSWORD=admin123
      - ARGOCD_SERVER_INSECURE=true
    volumes:
      - argocd_data:/var/lib/argocd
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9090/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - argocd-network
    profiles:
      - argocd

  # Redis for ArgoCD Notifications (if needed)
  redis:
    image: redis:7-alpine
    container_name: argocd-redis-basic
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - argocd-network
    profiles:
      - notifications

volumes:
  extension_data:
    driver: local
  argocd_data:
    driver: local
  redis_data:
    driver: local

networks:
  argocd-network:
    driver: bridge
