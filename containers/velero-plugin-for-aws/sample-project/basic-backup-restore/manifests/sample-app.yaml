---
apiVersion: v1
kind: Namespace
metadata:
  name: sample-app
  labels:
    app: sample-app
    environment: development
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: sample-app-config
  namespace: sample-app
  labels:
    app: sample-app
data:
  app_name: "Sample Application"
  version: "1.0.0"
  environment: "development"
  config_file: |
    # Sample configuration
    database_url: "postgresql://localhost:5432/sample_db"
    cache_ttl: 300
    log_level: "info"
---
apiVersion: v1
kind: Secret
metadata:
  name: sample-app-secret
  namespace: sample-app
  labels:
    app: sample-app
type: Opaque
data:
  # base64 encoded values (echo -n "password123" | base64)
  database_password: cGFzc3dvcmQxMjM=
  api_key: YXBpX2tleV8xMjM0NTY=
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sample-app-deployment
  namespace: sample-app
  labels:
    app: sample-app
    tier: frontend
spec:
  replicas: 3
  selector:
    matchLabels:
      app: sample-app
  template:
    metadata:
      labels:
        app: sample-app
        tier: frontend
    spec:
      containers:
      - name: sample-app
        image: nginx:alpine
        ports:
        - containerPort: 80
        env:
        - name: APP_NAME
          valueFrom:
            configMapKeyRef:
              name: sample-app-config
              key: app_name
        - name: APP_VERSION
          valueFrom:
            configMapKeyRef:
              name: sample-app-config
              key: version
        - name: ENVIRONMENT
          valueFrom:
            configMapKeyRef:
              name: sample-app-config
              key: environment
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: sample-app-secret
              key: database_password
        - name: API_KEY
          valueFrom:
            secretKeyRef:
              name: sample-app-secret
              key: api_key
        resources:
          requests:
            memory: "64Mi"
            cpu: "250m"
          limits:
            memory: "128Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: sample-app-service
  namespace: sample-app
  labels:
    app: sample-app
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 80
    protocol: TCP
    name: http
  selector:
    app: sample-app
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: sample-app-pvc
  namespace: sample-app
  labels:
    app: sample-app
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  storageClassName: gp2
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: sample-app-statefulset
  namespace: sample-app
  labels:
    app: sample-app
    tier: backend
spec:
  serviceName: sample-app-service
  replicas: 2
  selector:
    matchLabels:
      app: sample-app
      tier: backend
  template:
    metadata:
      labels:
        app: sample-app
        tier: backend
    spec:
      containers:
      - name: sample-app-backend
        image: busybox:1.35
        command: ["/bin/sh"]
        args: ["-c", "while true; do echo 'Backend service running'; sleep 30; done"]
        volumeMounts:
        - name: sample-app-storage
          mountPath: /data
        env:
        - name: BACKEND_ENV
          value: "production"
        resources:
          requests:
            memory: "32Mi"
            cpu: "100m"
          limits:
            memory: "64Mi"
            cpu: "200m"
  volumeClaimTemplates:
  - metadata:
      name: sample-app-storage
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: gp2
      resources:
        requests:
          storage: 1Gi
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: sample-app-ingress
  namespace: sample-app
  labels:
    app: sample-app
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
spec:
  ingressClassName: nginx
  rules:
  - host: sample-app.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: sample-app-service
            port:
              number: 80
